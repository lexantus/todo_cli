// Code generated by "enumer -type=Status -output=status_enumer.go"; DO NOT EDIT.

package tasks

import (
	"fmt"
	"strings"
)

const _StatusName = "WAITINGIN_PROGRESSCANCELEDDONE"

var _StatusIndex = [...]uint8{0, 7, 18, 26, 30}

const _StatusLowerName = "waitingin_progresscanceleddone"

func (i Status) String() string {
	if i < 0 || i >= Status(len(_StatusIndex)-1) {
		return fmt.Sprintf("Status(%d)", i)
	}
	return _StatusName[_StatusIndex[i]:_StatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StatusNoOp() {
	var x [1]struct{}
	_ = x[WAITING-(0)]
	_ = x[IN_PROGRESS-(1)]
	_ = x[CANCELED-(2)]
	_ = x[DONE-(3)]
}

var _StatusValues = []Status{WAITING, IN_PROGRESS, CANCELED, DONE}

var _StatusNameToValueMap = map[string]Status{
	_StatusName[0:7]:        WAITING,
	_StatusLowerName[0:7]:   WAITING,
	_StatusName[7:18]:       IN_PROGRESS,
	_StatusLowerName[7:18]:  IN_PROGRESS,
	_StatusName[18:26]:      CANCELED,
	_StatusLowerName[18:26]: CANCELED,
	_StatusName[26:30]:      DONE,
	_StatusLowerName[26:30]: DONE,
}

var _StatusNames = []string{
	_StatusName[0:7],
	_StatusName[7:18],
	_StatusName[18:26],
	_StatusName[26:30],
}

// StatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StatusString(s string) (Status, error) {
	if val, ok := _StatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Status values", s)
}

// StatusValues returns all values of the enum
func StatusValues() []Status {
	return _StatusValues
}

// StatusStrings returns a slice of all String values of the enum
func StatusStrings() []string {
	strs := make([]string, len(_StatusNames))
	copy(strs, _StatusNames)
	return strs
}

// IsAStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Status) IsAStatus() bool {
	for _, v := range _StatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// TODO remove me after PR
